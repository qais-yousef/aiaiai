#!/bin/sh -efu

# Copyright 2011-2012 Intel Corporation
# Author: Artem Bityutskiy
# License: GPLv2

srcdir="$(readlink -ev -- ${0%/*})"
PATH="$srcdir:$srcdir/libshell:$PATH"

. shell-error
. shell-args
. shell-signal
. aiaiai-sh-functions

PROG="${0##*/}"
message_time="yes"

# This is a small trick to make sure the script is portable - check if 'dash'
# is present, and if yes - use it.
if can_switch_to_dash; then
	exec dash -euf -- "$srcdir/$PROG" "$@"
	exit $?
fi

show_usage()
{
	cat <<-EOF
Usage: $PROG [options] <kernel-tree> <defconfig[,arch[,cross]]>

<kernel-tree>               - directory with kernel sources
<defconfig[,arch[,cross]]>  - the configuration to test.

The mbox file containing the patches to test is expected to come from stdin or
-i option can be used instead.

The configuration is specified as follows:

  defconfig[,arch[,cross]]

where

  * "defconfig" is the name of the kernel defconfig file to test
  * "arch" is the architecture (translates to Kbuild's ARCH variable value)
  * "cross" is the cross-compiler prefix (translates to Kbuild's CROSS_COMPILE
     variable value).

For example:

  omap2plus_defconfig,arm,arm-eabi-

means testing with defconfig "omap2plus_defconfig", ARCH=arm and
CROSS_COMPILE=arm-eabi-.

By default, $PROG assumes that the defconfig file is part of
the kernel tree, unless --confdir option is specified, in which case the
defconfig file will be searched for only in the specified directory.

Options:
  -j, --jobs=N           allow to run N jobs simultaneously (default is 1);
  -c, --commit-id=ID     the commit id to test against (default is the head of
                         the git tree (HEAD));
  -d, --dont-clone       work directly in <kernel-tree>, do not clone a
                         temporary copy of <kernel-tree>;
  -o, --objdir=OBJDIR    locate all output files in OBJDIR, including .config
                         (O=OBJDIR Kbuild feature); if undefined - a temporary
                         directory is created using mktemp);
  -C, --confdir=CDIR     path to the directory containing the defconfig file
                         by default the defconfig file is assumed to be part of
			 the <kernel-tree>; this option makes it possible to use
                         a stand-alone defconfig file instead;
  -i, --input=MBOX       use the MBOX file instead of stdin;
  -w, --workdir=WDIR     path to the work directory where the kernel will
                         be built (default: a temporary directory is created
                         using mktemp);
  -M, --kmake-opts       additional options to append to the final kernel
                         compilation 'make' command
                         (e.g., W=2 KALLSYMS_EXTRA_PASS=1)
  -p, --preserve         preserve all the temporary files - do not clean up;
  -v, --verbose          be verbose;
  -h, --help             show this text and exit.
EOF
}

fail_usage()
{
	[ -z "$1" ] || printf "%s\n" "$1"
	show_usage
	exit 1
}

# Apply patch <mbox>, compile the kernel and save build logs at <stdout_log>
# and <stderr_log>.
# Usage: compile_patch <mbox> <stdout_log> <stderr_log>
compile_patch()
{
	local file="$1"; shift
	local stdout_log="$1"; shift
	local stderr_log="$1"; shift
	local subj

	fetch_header_or_die subj "Subject" < "$file"

	verbose "Compiling \"$subj\""

	# Apply the patch
	apply_patch < "$file" || exit 0

	aiaiai-make-kernel $verbose -j "$jobs" -o "$objdir" $arch_opt -D "$dconf" \
		-O "$stdout_log" -E "$stderr_log" ${kmake_opts:+-M "$kmake_opts"} \
		-- "$cloned_kernel" all
}

tmpdir=
preserve=
cleanup_handler()
{
	if [ -n "$preserve" ]; then
		message "Preserved tmpdir: $tmpdir"
	else
		[ -z "$tmpdir" ] || verbose "Removing $tmpdir";
		rm -rf -- "$tmpdir" >&2
	fi
}
set_cleanup_handler cleanup_handler

TEMP=`getopt -n $PROG -o j:,c:,d,o:,C:,i:,w:,M:,p,v,h --long jobs:,commit-id:,dont-clone,objdir:,confdir:,input:,workdir:,kmake-opts:,preserve,verbose,help -- "$@"` ||
	fail_usage ""
eval set -- "$TEMP"

jobs=1
commit_id=HEAD
dont_clone=
objdir=
confdir=
mbox=
kmake_opts=
verbose=
quiet="-q"

while true; do
	case "$1" in
	-j|--jobs)
		jobs="$(opt_check_number "$1" "$2")"
		shift
		;;
	-c|--commit-id)
		commit_id="$2"
		shift
		;;
	-d|--dont-clone)
		dont_clone="--dont-clone"
		;;
	-o|--objdir)
		objdir="$(readlink -fv -- "$2")"
		shift
		;;
	-C|--confdir)
		confdir="$(opt_check_dir "$1" "$2")"
		shift
		;;
	-i|--input)
		mbox="$(opt_check_read "$1" "$2")"
		shift
		;;
	-w|--workdir)
		mkdir $verbose -p -- "$2" >&2
		tmpdir="$(mktemp --tmpdir="$(readlink -fv -- "$2")" -dt "$PROG.XXXX")"
		shift
		;;
	-M|--kmake-opts)
		kmake_opts="$2"
		shift
		;;
	-p|--preserve)
		preserve="--preserve"
		;;
	-v|--verbose)
		verbose=-v
		quiet=
		;;
	-h|--help)
		show_usage
		exit 0
		;;
	--) shift; break
                ;;
	*) fail_usage "Unrecognized option: $1"
		;;
	esac
	shift
done

[ "$#" -eq 2 ] || die "Please, specify exactly 2 arguments - the kernel tree and the configuration"

kernel_tree="$(readlink -ev -- "$1")"; shift
defconfig_orig="$1"
defconfig="$(leave_first "$1")";
arch="$(leave_second "$1")";
cross="$(leave_third "$1")";
arch_opt=

[ -z "$arch" ] || arch_opt="-a $arch${cross:+",$cross"}"

[ -n "$tmpdir" ] || tmpdir="$(mktemp -dt "$PROG.XXXX")"
tmp_mbox="$tmpdir/tmp_mbox"
[ -n "$objdir" ] || objdir="$tmpdir/obj.$defconfig"

# Save the mbox to a temporary file if it comes from stdin
if [ -z "$mbox" ]; then
	mbox="$tmpdir/mbox"
	cat > "$mbox"
fi

patch_cnt="$(formail -s echo 1 < "$mbox" | wc -l)"
if [ "$patch_cnt" -le 1 ]; then
	verbose "Only one patch, nothing to test"
	exit 0;
fi

verbose "Bisecting $patch_cnt patches for configuration \"$defconfig_orig\""

if [ -z "$dont_clone" ]; then
	cloned_kernel="$tmpdir/src"
	# Use a shared clone since it is local and we won't mess up the tree
	git clone --shared "${verbose:--q}" "$kernel_tree" "$cloned_kernel" >&2
else
	cloned_kernel="$kernel_tree"
fi

cd "$cloned_kernel"
commit_id="$(git --git-dir="$(git_dir "$kernel_tree")" rev-parse "$commit_id^{commit}")"
git reset $quiet --hard "$commit_id" >&2

dconf="$defconfig"
[ -z "$confdir" ] || dconf="$confdir/$dconf"

base_stdout_log="$tmpdir/$defconfig.base.stdout.log"
base_stderr_log="$tmpdir/$defconfig.base.stderr.log"
stdout_log="$tmpdir/$defconfig.stdout.log"
stderr_log="$tmpdir/$defconfig.stderr.log"

verbose "Building the base tree"
base_commit_failed=
aiaiai-make-kernel $verbose -j "$jobs" -o "$objdir" $arch_opt -D "$dconf" \
	-O "$base_stdout_log" -E "$base_stderr_log" \
	${kmake_opts:+-M "$kmake_opts"} -- "$cloned_kernel" all
if build_failed "$base_stderr_log"; then
	# Failed to build the base commit, report, but don't exit in case the
	# first patch fixes the issue.
	base_commit_failed="yes"
fi

n=0
while [ "$n" -lt "$patch_cnt" ]; do
	formail +$n -1 -s < "$mbox" > "$tmp_mbox"
	compile_patch "$tmp_mbox" "$stdout_log" "$stderr_log"
	n="$(($n+1))"

	if build_failed "$stderr_log"; then
		if [ "$n" = 1 ] && [ -n "$base_commit_failed" ]; then
			# Base commit failed too, report about this
			build_failure "$defconfig_orig" "$commit_id" \
			              "the base commit" < "$base_stderr_log"
			printf "\n\n"
		fi
		build_failure "$defconfig_orig" "HEAD" "patch #$n"< "$stderr_log"
		exit 0
	fi
done

if [ -n "$base_commit_failed" ]; then
	printf "%s\n" "Base commit build failed, but the first patch fixed the build failure."
fi
