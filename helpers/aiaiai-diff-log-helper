#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Sort an compare 2 build logs.

Author: Ed Bartosh <eduard.bartosh@intel.com>
Licence: GPLv2
"""

# Sorts 2 build logs and compares them. Blocks can be as follows.
#
# 1a. All consequitive lines starting with the same file prefix belong to one
# block, e.g.:
#
# drivers/s.c:472:22: warning: incorrect type in assignment (different address spaces) [sparse]
# drivers/s.c:472:22:    expected struct table_header *mapped_table [sparse]
# drivers/s.c:472:22:    got void [noderef] <asn:2>* [sparse]
#
# (the prefix is "drivers/s.c:472")
#
# 1b. All consequitive lines starting with prefix "make:", "make[1]:", etc.
# These usually belong to build failures.
#
# 2. GCC 'In file included from' blocks look like this:
#
# In file included from include/linux/kernel.h:17:0,
#                  from include/linux/sched.h:55,
#                  from arch/arm/kernel/asm-offsets.c:13
# include/linux/bitops.h: In function 'hweight_long':
# include/linux/bitops.h:55:26: warning: signed and unsigned type in expression
#
# or
#
# In file included from arch/x86/include/asm/uaccess.h:570:0,
#                 from include/linux/uaccess.h:5,
#                 from include/linux/highmem.h:7,
#                 from include/linux/pagemap.h:10,
#                 from fs/binfmt_misc.c:26:
# In function ‘copy_from_user’,
#     inlined from ‘parse_command.part.0’ at fs/binfmt_misc.c:422:20:
# arch/x86/include/asm/uaccess_32.h:211:26: warning: call to ‘copy_from_user’
#
# 3. GCC 'In function' blocks look like this:
#
# drivers/i.c: In function ‘gluebi_erase’:
# drivers/i.c:177:2: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
#
# 4. All lines starting with a white-space after any of the above blocks are
#    also part of the block, e.g.,
#
# drivers/char/agp/isoch.c: In function ‘agp_3_5_enable’:
# drivers/char/agp/isoch.c:320:13: warning: variable ‘arqsz’ set but not used [-Wunused-but-set-variable]
#  u32 isoch, arqsz;
#             ^
#
# 5. Any other line comprises an independent block

import sys
import os
import re
import itertools

def gen_blocks(stream):
    """Parses input stream. Yields found blocks."""
    btype, prefix, block = "", "", []
    for line in stream:
        # Append line to the current block if it starts with a white-space
        if line.startswith(" "):
            block.append(line)
        # Append line to the current block if prefix matches
        elif prefix and line.startswith(prefix):
            block.append(line)
        # Define prefix for cases 2 and 3 for further processing
        elif not prefix and btype in ("ifi", "infunc"):
            block.append(line)
            if re.match("^[^\s]+/[^\s]+:\d+:", line):
                prefix = ":".join(line.split(':')[:2])
        # 'In file inculded' block (case 2.)
        elif re.match("^In file included from .+", line):
            yield block
            btype = "ifi"
            prefix = ""
            block = [line]
        # 'In function' block (case 3.)
        elif re.match("^[^\s]+/[^\s]+: In function .+", line):
            yield block
            btype = "infunc"
            prefix = ""
            block = [line]
        # file prefixed block (case 1a.)
        elif re.match("^[^\s]+/[^\s]+:\d+:", line):
            yield block
            prefix = ":".join(line.split(':')[:2])
            btype = "prefix"
            block = [line]
        # file prefixed block (case 1b.)
        elif re.match("^make(\[\d+\]){0,1}:", line):
            yield block
            prefix = line.split(':')[0]
            btype = "prefix"
            block = [line]
        # the rest (case 4.)
        else:
            yield block
            btype = "plain"
            prefix = ""
            block = [line]
    yield block

def main(argv):
    """Script entry point."""

    infile1, infile2 = open(argv[1]), open(argv[2])
    outfile = sys.stdout
    if len(argv) > 3:
        outfile = open(argv[3], "w")

    with open(argv[1]) as infile1, \
         open(argv[2]) as infile2:

        result = {}
        for blk1, blk2 in itertools.izip_longest(gen_blocks(infile1),
                              gen_blocks(infile2), fillvalue=[]):
            if blk1 == blk2:
                continue
            for block, sign in [(tuple(blk1), "-"), (tuple(blk2), "+")]:
                if block:
                    if block in result:
                        del result[block]
                    else:
                        result[block] = sign

        result = sorted(result.items())
        if result:
            print "--- before_patching.log"
            print "+++ after_patching.log"
            prefix = ""
            for block, sign in result:
                if not prefix or not block[0].startswith(prefix):
                    print "@@ @@"
                for line in block:
                    print "%s%s" % (sign, line),
                if re.match("^[^\s]+/[^\s]+:", block[0]):
                    prefix = block[0].split(':')[0]

    outfile.close()

if __name__ == "__main__":
    if len(sys.argv) == 1 or sys.argv[1] == "--help":
        print "Usage: %s <input log 1> <input log 2> [<diff file>]" % \
              os.path.basename(sys.argv[0])
        sys.exit(0)
    sys.exit(main(sys.argv))

# vim: ts=4 et sw=4 sts=4 ai sta:
