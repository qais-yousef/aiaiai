#!/bin/sh -efu

# Copyright 2011-2012 Intel Corporation
# Author: Artem Bityutskiy
# License: GPLv2

srcdir="$(readlink -ev -- ${0%/*}/..)"
PATH="$srcdir:$srcdir/email:$srcdir/external/libshell:$PATH"

. shell-error
. shell-args
. shell-signal
. aiaiai-sh-functions
. aiaiai-email-sh-functions

PROG="${0##*/}"
export message_time="yes"

show_usage()
{
	cat <<-EOF
Usage: $PROG [options] <cfgfile.ini>

The mbox file containing the patches to test is expected to come from stdin
(unless --input option is specified).

<cfgfile.ini>          - the configuration file.

Options:
  -i, --input=MBOX       use the MBOX file instead of stdin;
  -C, --confdir=CDIR     path to the directory containing the defconfig files
                         (those you specify in the config file); by default the
                         defconfig files are assumed to be part of the
                         <kernel-tree>; this option makes it possible to use
                         stand-alone defconfig files instead;
  -p, --preserve         preserve all the temporary files - do not clean up;
      --test-mode        test mode - work as usually, but do not actually
                         send replies;
      --bisectability    test bisectability;
      --sparse           check with sparse while building;
      --smatch           check with smatch while building;
      --cppcheck         check with cppcheck;
      --coccinelle       check with coccinlle;
  -v, --verbose          be verbose;
  -h, --help             show this text and exit.
EOF
}

fail_usage()
{
	[ -z "$1" ] || printf "%s\n" "$1"
	show_usage
	exit 1
}

preserve=
verbose=
mbox=
tmpdir=
cleanup_handler()
{
	rm $verbose -rf -- "$mbox" >&2

	if [ -n "$preserve" ]; then
		message "Preserved tmpdir: $tmpdir"
	else
		[ -z "$tmpdir" ] || verbose "Removing $tmpdir";
		rm -rf -- "$tmpdir" >&2
	fi
}
set_cleanup_handler cleanup_handler

# List currently supported projects.
list_projects()
{
	local prj

	LC_ALL=C sed -n -e "s/^\[prj_\(.*\)\]$/\1/p" "$cfgfile" | while read -r prj; do
		printf "* %s\n" "$cfg_ownmail_local+$prj@$cfg_ownmail_domain: $cfg_descr"
	done
}

# Send an e-mail reply to the patch author.
# Usage: send_email
send_email()
{
	compose_email "$from" "$to" "$subj" "$id" > "$tmpdir/mail"

	[ -z "$verbose" ] || cat -- "$tmpdir/mail" >&2

	if [ -z "$test_mode" ]; then
		mutt -x -H "$tmpdir/mail" </dev/null
	else
		verbose "Do not actually send the email - we are in test mode"
	fi
}

TEMP=`getopt -n $PROG -o i:,C:,p,v,h --long test-mode,input:,confdir:,preserve,bisectability,sparse,smatch,cppcheck,coccinelle,verbose,help -- "$@"` ||
	fail_usage ""
eval set -- "$TEMP"

mbox=
confdir=
test_mode=
bisectability=
sparse=
smatch=
cppcheck=
coccinelle=

while true; do
	case "$1" in
	-i|--input)
		mbox="$(opt_check_read "$1" "$2")"
		shift
		;;
	-C|--confdir)
		confdir="$(opt_check_dir "$1" "$2")"
		shift
		;;
	-p|--preserve)
		preserve="--preserve"
		;;
	--test-mode)
		test_mode=y
		;;
	--bisectability)
		bisectability="--bisectability"
		;;
	--sparse)
		sparse="--sparse"
		;;
	--smatch)
		smatch="--smatch"
		;;
	--cppcheck)
		cppcheck="--cppcheck"
		;;
	--coccinelle)
		coccinelle="--coccinelle"
		;;
	-v|--verbose) verbose=-v
		;;
	-h|--help)
		show_usage
		exit 0
		;;
	--) shift; break
                ;;
	*) fail_usage "Unrecognized option: $1"
		;;
	esac
	shift
done

[ "$#" -eq 1 ] || die "Insufficient or too many arguments"

program_required "mutt" ""
program_required "grep" ""
program_required "sed" ""
program_required "formail" ""

cfgfile="$1"; shift

# Save the mbox to a temporary file if it comes from stdin
if [ -z "$mbox" ]; then
	mbox="$(mktemp -t "$PROG.mbox.XXXX")"
	cat > "$mbox"
fi

fetch_header_or_die subj "Subject" < "$mbox"
fetch_header_or_die from "From" < "$mbox"
fetch_header_or_die id "Message-Id" < "$mbox"
msgname="$from: $subj (Message-Id: $id)"

echo >&2
message "Testing mbox: \"$msgname\""
message "parsing config file \"$cfgfile\""

parse_config "$cfgfile"

mkdir $verbose -p -- "$cfg_workdir" >&2

tmpdir="$(mktemp --tmpdir="$cfg_workdir" -dt "$PROG.XXXX")"
mv $verbose -- "$mbox" "$tmpdir/mbox" >&2
mbox="$tmpdir/mbox"

to="$(fetch_header "To" < "$mbox")"
cc="$(fetch_header "Cc" < "$mbox")"

# Either "To:" or "Cc:" must exist
if [ -z "$to" ] && [ -z "$cc" ]; then
       die "Neither \"To:\" nor \"Cc:\" header found"
fi

# Find out the project name
prj="$(fetch_project_name "$to" "$cfg_ownmail")"

verbose "Project \"$prj\""

# Reject the e-mail if the project has not been specified
if [ -z "$prj" ]; then
	to=
	send_email <<EOF
Sorry, but you have not specified the project name. Please, specify it
using symbol "+" in the e-mail address of $ownname.

List of projects $cfg_ownname supports:

$(list_projects)

If you have questions, please contact "$cfg_adminname" <$cfg_adminmail>.
EOF
	exit 0
fi

# Fetch project configuration
parse_prj_config "$cfgfile" "$prj"

# Check if we have this project in our config file
if [ -z "$cfg_name" ]; then
	to=
	send_email <<EOF
Sorry, but project "$prj" is not supported. List of projects $cfg_ownname supports:

$(list_projects)

If you have questions, please contact "$cfg_adminname" <$cfg_adminmail>.
EOF
	exit 0
fi

# Merge the "To" and "Cc" addresses
to="$(merge_addresses "$to" "$cc")"

if [ "$cfg_reply_to_all" != "1" ]; then
	to=
else
	# Strip own address
	to=$(strip_address "$to" "$cfg_ownmail")
fi

# Notify the sender that the patches have been accepted
if [ "$cfg_accept_notify" = "1" ]; then
	message "Sending \"accepted\" e-mail"
	send_email <<EOF
Your patch or patch-set:

$(fetch_header_per_patch "Subject" < "$mbox" | sort)

has been scheduled for testing.
EOF
fi

# Test the path (or patch-set)
message "Test configs \"$cfg_configs\" branch \"$cfg_branch\" of \"$cfg_path\""
aiaiai-test-patchset $verbose $preserve $bisectability $sparse $smatch $cppcheck $coccinelle \
	-i "$mbox" -j "$cfg_jobs" -c "$cfg_branch" -w "$tmpdir" \
	${confdir:+-C "$confdir"} \
	${cfg_unwanted_keywords:+-K "$cfg_unwanted_keywords"} -- \
	"$cfg_path" "$cfg_configs" > "$tmpdir/test-patchset.log" ||
{
	message "aiaiai-test-patchset failed"
	send_email <<EOF
Sorry, but an internal error happened. Please, send a bug report to
"$cfg_adminname" <$cfg_adminmail>.
EOF
	exit 0
}

message "Test is finished, sending back the results"

send_email <<EOF
$cfg_built_preamble

$(fetch_header_per_patch "Subject" < "$mbox" | sort)

Project: $cfg_name ($cfg_descr)

Configurations: $cfg_configs

$(cat -- $tmpdir/test-patchset.log)
EOF
