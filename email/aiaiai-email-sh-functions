#!/bin/sh -efu

# Copyright 2011-2013 Intel Corporation
# Author: Artem Bityutskiy
# License: GPLv2

. shell-error
. shell-ini-config
. shell-quote

if [ -z "${__included_aiaiai_email_sh_functions-}" ]; then
__included_aiaiai_email_sh_functions=1

# All patches we deal with have to have the following prefix
prefix_format="[Prefix PATCH Suffix <m/n>]"

# A single blank character
__blank="[[:blank:]]{1}"
# Reasonable number of blanks
__blanks="[[:blank:]]{0,16}"
# Reasonable number of [blah] prefixes
__blah="(\[[^]]*\]${__blanks}){0,4}"
# The prefix
__prefix="${__blanks}([^[:blank:]]*${__blanks}${__blank})?"
# Patch number pattern
__num="0*([[:digit:]]+)"
# The "PATCH" word for case-insensitive matching
__patch="[Pp][Aa][Tt][Cc][Hh]"
# Sed regexp matching correct subject
__single="^${__blah}\[${__prefix}${__patch}.*\].*$"
# Sed regexps matching m and n
__series="^${__blah}\[${__prefix}${__patch}.*${__blank}${__num}\/?${__num}${__blanks}\].*$"
__mref="\3"
__nref="\4"

# Get "m" (patch's number in the series) from the subject
# Usage: subject_m <subject>
subject_m()
{
	local subj="$1"
	printf "%s" "$subj" | LC_ALL=C sed -n -E "s/$__series/$__mref/p"
}

# Get "n" (count of patches in the series)  from the subject
# Usage: subject_n <subject>
subject_n()
{
	local subj="$1"
	printf "%s" "$subj" | LC_ALL=C sed -n -E "s/$__series/$__nref/p"
}

# Check that the subject has the correct format
# Usage: check_subject <subject>
subject_check()
{
	[ -n "$(printf "%s" "$1" | LC_ALL=C sed -n -E "/$__single/ p")" ]
}

# Strip an e-mail address from the comma-separated list of e-mail addresses
# Usage: strip_address <list> <email>
strip_address()
{
	local list="$1"; shift
	local email="$1"; shift
	local l d

	# Get the local and domain parts of the e-mail address
	l="$(printf "%s" "$email" | LC_ALL=C sed "s/@.*//g")"
	d="$(printf "%s" "$email" | LC_ALL=C sed "s/.*@//g")"

	# Quote special sed symbols
	quote_sed_regexp_variable l "$l"
	quote_sed_regexp_variable d "$d"

	# Strip the email from the list taking into account that local@domain
	# address is equivalent to the local+xyz@domain address.
	printf "%s" "$list" | LC_ALL=C sed -e "s/[^,]*$l+\{0,1\}[^@]*@$d[^,]*//g" \
					   -e "s/,,/,/g" -e "s/^,//" -e "s/,$//" \
					   -e "s/[[:blank:]]\+//g"
}

# Fetch project name from a list of e-mail address. The project is specified like
# this: local+project@domain, and the second parameter is the 'local@domain'
# part.
# Usage: fetch_project_name <list> <email>
fetch_project_name()
{
	local list="$1"; shift
	local email="$1"; shift
	local l d

	# Get the local and domain parts of the e-mail address
	l="$(printf "%s" "$email" | LC_ALL=C sed "s/@.*//g")"
	d="$(printf "%s" "$email" | LC_ALL=C sed "s/.*@//g")"

	# Quote special sed symbols
	quote_sed_regexp_variable l "$l"
	quote_sed_regexp_variable d "$d"

	printf "%s" "$list" | LC_ALL=C sed -n -e "s/.*$l+\([^@]\+\)@$d.*/\1/p" | head -n1
}

# Merge e-mail addresses into a comma-separated list
# Usage: merge_addresses "addr1" "addr2"
merge_addresses()
{
	local addr1="$1"; shift
	local addr2="$1"; shift
	local list="$(printf "%s" "$addr1,$addr2" | LC_ALL=C tr -d "\n")"

	printf "%s" "$list" | LC_ALL=C sed -e "s/,,/,/g" -e "s/^,//" \
		                           -e "s/,$//" -e "s/[[:blank:]]\+//g"
}

# A helper function for 'ini_config_get()' (from libshell) which fails when
# unable to get the ini file option.
ini_config_get_or_die()
{
	local var="$1"; shift
	local result="$(ini_config_get "$1" "$2" "$3")"

	[ -n "$result" ] ||
		die "Could not find config option \"$2.$3\" in \"$1\""

	eval "$var=\"\$result\""
}

# Parse the "global" and "email" sections of the config file. The result is a
# set of per-option variables and their values are exactly as in the
# configuration file:
#
# cfg_ownname, cfg_ownmail, cfg_adminname, cfg_adminmail, cfg_workdir,
# cfg_jobs, cfg_signature, cfg_built_preamble.
#
# Additinally, the following variables are defined:
#   o cfg_preamble - contains the email preamble read from the file definded
#     in email.preamble variable
#
# Usage: parse_config <cfgfile>
parse_config()
{
	local cfgfile="$1"

	ini_config_get_or_die cfg_ownname   "$cfgfile" "global" "ownname"
	ini_config_get_or_die cfg_ownmail   "$cfgfile" "global" "ownmail"
	ini_config_get_or_die cfg_adminmail "$cfgfile" "global" "adminmail"
	ini_config_get_or_die cfg_adminname "$cfgfile" "global" "adminname"
	ini_config_get_or_die cfg_workdir   "$cfgfile" "global" "workdir"
	ini_config_get_or_die cfg_jobs      "$cfgfile" "global" "jobs"

	ini_config_get_or_die cfg_signature      "$cfgfile" "email" "signature"
	ini_config_get_or_die cfg_preamble       "$cfgfile" "email" "preamble"
	ini_config_get_or_die cfg_built_preamble "$cfgfile" "email" "built_preamble"

	cfg_preamble="$(cat "$cfg_preamble")"

	# Get the local and domain parts of own e-mail address
	cfg_ownmail_local="$(printf "%s" "$cfg_ownmail"  | LC_ALL=C sed "s/@.*//g")"
	cfg_ownmail_domain="$(printf "%s" "$cfg_ownmail" | LC_ALL=C sed "s/.*@//g")"
}

# Similar to "parse_config", but parses a project configuration section. If the
# project is found, the following variables are defined:
#
# cfg_name. cfg_description, cfg_path, cfg_configs, cfg_branch,
# cfg_reply_to_all, # cfg_accept_notify, cfg_always_cc, cfg_unwanted_keywords,
# and cfg_kmake_opts.
#
# If the project is not found, this function only defined an empty "cfg_name"
# variable.
#
# Usage: parse_prj_config <cfgfile> <prj>
parse_prj_config()
{
	local cfgfile="$1"; shift
	local prj="$1"; shift

	cfg_name="$(ini_config_get "$cfgfile" "prj_$prj" "name")"
	[ -n "$cfg_name" ] || return 0

	ini_config_get_or_die cfg_description   "$cfgfile" "prj_$prj" "description"
	ini_config_get_or_die cfg_path          "$cfgfile" "prj_$prj" "path"
	ini_config_get_or_die cfg_configs       "$cfgfile" "prj_$prj" "configs"
	ini_config_get_or_die cfg_branch        "$cfgfile" "prj_$prj" "branch"
	ini_config_get_or_die cfg_reply_to_all  "$cfgfile" "prj_$prj" "reply_to_all"
	ini_config_get_or_die cfg_accept_notify "$cfgfile" "prj_$prj" "accept_notify"

	cfg_always_cc="$(ini_config_get "$cfgfile" "prj_$prj" "always_cc")"
	cfg_unwanted_keywords="$(ini_config_get "$cfgfile" ""prj_$prj"" "unwanted_keywords")"
	cfg_kmake_opts="$(ini_config_get "$cfgfile" "prj_$prj" "kmake_opts")"
}

# Compose (but not send) e-mail reply. This function assumes that the following
# variables are defined: cfg_ownname, cfg_ownmail, cfg_adminname,
# cfg_adminmail, cfg_preamble, cfg_signature. See "parse_config()" function.
#
# Usage: compose_email <to> <cc> <subj> <in_reply_to>
compose_email()
{
	local to="$1"; shift
	local cc="$1"; shift
	local subj="$1"; shift
	local in_reply_to="$1"; shift

	if [ -n "$cc" ]; then
		# A newline characters
		local __newline="
"

		cc="$(LC_ALL=C; printf "%s" "$cc" | tr "," "\n" | \
				sed -e "/^$/d" -e "s/^/Cc: /g")"
		cc="$__newline$cc"
	fi

	cat <<EOF
To: $to
From: "$cfg_ownname" <$cfg_ownmail>$cc
Subject: Re: $subj
In-Reply-To: $in_reply_to
Reply-To: "$cfg_adminname" <$cfg_adminmail>

$cfg_preamble

$(cat)

--
$cfg_signature
EOF
}

fi #__included_aiaiai_email_sh_functions
