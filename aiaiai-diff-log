#!/bin/sh -euf

# Copyright 2011-2012 Intel Corporation
# Authors: Artem Bityutskiy
#          Kirill Shutemov
# License: GPLv2

srcdir="$(readlink -ev -- ${0%/*})"
PATH="$srcdir:$srcdir/external/libshell:$srcdir/external:$PATH"

. shell-error
. shell-args
. shell-signal
. shell-quote
. aiaiai-sh-functions

PROG="${0##*/}"
message_time="yes"

show_usage()
{
        cat <<-EOF
Usage: $PROG [options] <patch> <log_before> <log_after>

Compare 2 kernel build logs - before and after <patch> was applied.

<patch>       - the patch which was applied to the "before" kernel
<log_before>  - build log before <patch> was applied
<log_after>   - build log after <patch> was applied

Options:
  -w, --workdir=WDIR     path to the work directory (default: a temporary
                         directory is created using mktemp);
  -p, --preserve         preserve all the temporary files - do not clean up;
  -v, --verbose          be verbose;
  -h, --help             show this text and exit.
EOF
}

fail_usage()
{
	[ -z "$1" ] || printf "%s\n" "$1"
	show_usage
	exit 1
}

# After joining the "before" and "after" build logs, then sorting and splitting
# them back, there may be identical lines but just shifted a bit, and this is
# visible in the diff, which we do not want. E.g.:
#
# @@ @@
#-cc1: warning: drivers/media/dvb/dvb-core: No such file or directory [enabled by default]
#-cc1: warning: drivers/media/dvb/frontends: No such file or directory [enabled by default]
#@@ @@
#+cc1: warning: drivers/media/dvb/dvb-core: No such file or directory [enabled by default]
#+cc1: warning: drivers/media/dvb/frontends: No such file or directory [enabled by default]
#@@ @@
#
# This function tries to fix this up. Yes, this is ugly and we need to write a
# good tool which compares parallel builds in C and invent a smarter algorithm
# of comparison.
remove_same_lines()
{
        local diff="$1"
        local line

        while IFS= read -r line; do
                local l

		l="$(printf "%s" "$line" | sed -n -e 's/^[+-]\{1\}\([^+-]\{1\}.*\)$/\1/p')"
                if [ -z "$l" ]; then
                        printf "%s\n" "$line"
                        continue
                fi

                local p c1 c2
                quote_sed_regexp_variable p "$l"
		c1="$(grep -c -- "^-$p$" < "$diff" ||:)"
		c2="$(grep -c -- "^+$p$" < "$diff" ||:)"

		[ "$c1" -eq "$c2" ] || printf "%s\n" "$line"
        done < "$diff" | sed -n -e 'p; /^@@ @@$/ {:a n; /@@ @@/ba; p}' # Remove multiple "@@ @@"
}

# The remap-log utility handles renames for lines which start with the file
# name, but this does not cover all the case. This function checks if the patch
# renames any file and if yes, substitutes old names with new names.
rename_log()
{
	local file="$1"
	local renames pattern from to

	# Look for pairs of lines like this in the diff file:
	#
	# rename from drivers/a/xxx.c
	# rename to drivers/a/yyy.c
	#
	# and transform them to lines like this:
	#
	# drivers/a/xxx.c drivers/a/yyy.c
	#
	# and then pipe to the while loop
	sed -n -e '/^rename from / {
		s/^rename from \(.*\)/\1/
		N
		/\nrename to / s/\nrename to//p
	}' "$patch" | \
	while read -r from to; do
		local q1 q2

		# Quote special symbols and substitute old names with new names
                quote_sed_regexp_variable q1 "$from"
                quote_sed_regexp_variable q2 "$to"
		sed -i -e "s/$q1/$q2/g" "$file"
	done

}

tmpdir=
preserve=
cleanup_handler()
{
	if [ -n "$preserve" ]; then
		message "Preserved tmpdir: $tmpdir"
	else
		rm $verbose -rf -- "$tmpdir" >&2
	fi
}
set_cleanup_handler cleanup_handler

TEMP=`getopt -n $PROG -o w:,p,v,h --long workdir:,preserve,verbose,help -- "$@"` ||
	fail_usage ""
eval set -- "$TEMP"

verbose=

while true; do
	case "$1" in
	-w|--workdir)
		mkdir $verbose -p -- "$2" >&2
		tmpdir="$(mktemp --tmpdir="$(readlink -fv -- "$2")" -dt "$PROG.XXXX")"
		shift
		;;
	-p|--preserve)
		preserve="--preserve"
		;;
	-v|--verbose) verbose=-v
		;;
	-h|--help)
		show_usage
		exit 0
		;;
	--) shift; break
                ;;
	*) fail_usage "Unrecognized option: $1"
		;;
	esac
	shift
done

[ "$#" = 3 ] || die "Insufficient or too many arguments"

program_required "remap-log" \
		 "You probably did not compile it, run 'make' in the topmost aiaiai source code directory"

patch="$(readlink -ev -- "$1")"; shift
input_log1="$(readlink -ev -- "$1")"; shift
input_log2="$(readlink -ev -- "$1")"; shift

[ -n "$tmpdir" ] || tmpdir="$(mktemp -dt "$PROG.XXXX")"

log1="$tmpdir/${input_log1##*/}.before"
log2="$tmpdir/${input_log2##*/}.after"

verbose "Comparing $input_log1 and $input_log2"

remap-log < "$patch" > "$tmpdir/map"
remap-log -o "" -p "line " "$tmpdir/map" < "$input_log1" > "$log1.remapped"

rename_log "$log1.remapped"

aiaiai-diff-log-helper "$log1.remapped" "$input_log2" "$tmpdir/diff"

cat "$tmpdir/diff"

verbose "Successfully compared $input_log1 and $input_log2"
